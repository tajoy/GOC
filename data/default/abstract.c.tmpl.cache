timestamp: 1462872569.9821393
encoding: utf-8

_extend=_buf.extend;_to_str=to_str;_escape=escape; include('./header.c.tmpl')
_extend(('''

/************ includes ************/
#include "''', _escape(_to_str(file_base)), '''.h"


/************ defines ************/
G_DEFINE_ABSTRACT_TYPE(''', _escape(_to_str(camel_id)), ''', ''', _escape(_to_str(snake_id)), ''', ''', _escape(_to_str(parent_type_macro)), ''')
#define GET_PRIVATE(o) (G_TYPE_INSTANCE_GET_PRIVATE ((o), TYPE_''', _escape(_to_str(big_snake_id)), ''', ''', _escape(_to_str(camel_id)), '''Private))

/************ types ************/
struct _''', _escape(_to_str(camel_id)), '''Private
{
    gint prop_one;
    gint prop_two;
};

enum _Properties
{
    __PROPERTIES_BEGIN__, /* unuse */

    PORP_ONE,
    PORP_TWO,

    N_PROPERTIES
};


/************ globals ************/
static GParamSpec *obj_properties[N_PROPERTIES] = { NULL, };


/************ function declarations ************/

static void dispose_od(GObject *object);
static void finalize_od(GObject *object);
static void get_property_od(GObject*object, guint property_id, GValue *value, GParamSpec *pspec);
static void set_property_od(GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);

/************ function implements ************/
static void ''', _escape(_to_str(snake_id)), '''_class_init(''', _escape(_to_str(camel_id)), '''Class *klass)
{
    GObjectClass *g_object_class = G_OBJECT_CLASS(klass);
    g_type_class_add_private(g_object_class, sizeof(''', _escape(_to_str(camel_id)), '''Private));
    g_object_class->dispose = dispose_od;
    g_object_class->finalize = finalize_od;
    g_object_class->get_property = get_property_od;
    g_object_class->set_property = set_property_od;

    obj_properties[PORP_ONE] =
        g_param_spec_int("one",
            "One",
            "Set/Get property one",
            G_MININT /* minimum value */,
            G_MAXINT /* maximum value */,
            0 /* default value */,
            ( G_PARAM_CONSTRUCT | G_PARAM_READWRITE)
            );

    obj_properties[PORP_TWO] =
        g_param_spec_int("two",
            "Two",
            "Set/Get property two",
            G_MININT /* minimum value */,
            G_MAXINT /* maximum value */,
            0 /* default value */,
            ( G_PARAM_CONSTRUCT | G_PARAM_READWRITE)
            );

    g_object_class_install_properties (g_object_class,
        N_PROPERTIES,
        obj_properties);
}

static void ''', _escape(_to_str(snake_id)), '''_init(''', _escape(_to_str(camel_id)), ''' *self)
{
    ''', _escape(_to_str(camel_id)), '''Private *priv = GET_PRIVATE(self);
}

static void dispose_od(GObject *object)
{
    ''', _escape(_to_str(camel_id)), ''' *self = (''', _escape(_to_str(camel_id)), '''*)object;
    ''', _escape(_to_str(camel_id)), '''Private *priv = GET_PRIVATE(self);
    // 释放创建的对象
    G_OBJECT_CLASS(''', _escape(_to_str(snake_id)), '''_parent_class)->dispose(object);
}

static void finalize_od(GObject *object)
{
    ''', _escape(_to_str(camel_id)), ''' *self = (''', _escape(_to_str(camel_id)), '''*)object;
    ''', _escape(_to_str(camel_id)), '''Private *priv = GET_PRIVATE(self);
    // 释放创建的内存
    G_OBJECT_CLASS(''', _escape(_to_str(snake_id)), '''_parent_class)->finalize(object);
}


static void get_property_od(GObject*object, guint property_id, GValue *value, GParamSpec *pspec)
{
    ''', _escape(_to_str(camel_id)), ''' *self = ''', _escape(_to_str(big_snake_id)), ''' (object);
    ''', _escape(_to_str(camel_id)), '''Private *priv = GET_PRIVATE(self);

    switch (property_id)
    {
    case PORP_ONE:
        g_value_set_int (value, priv->prop_one);
        break;

    case PORP_TWO:
        g_value_set_int (value, priv->prop_two);
        break;

    default:
        /* We don\'t have any other property... */
        G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
        break;
    }
}

static void set_property_od(GObject *object, guint property_id, const GValue *value, GParamSpec *pspec)
{
    ''', _escape(_to_str(camel_id)), ''' *self = ''', _escape(_to_str(big_snake_id)), ''' (object);
    ''', _escape(_to_str(camel_id)), '''Private *priv = GET_PRIVATE(self);

    switch (property_id)
    {
    case PORP_ONE:
        priv->prop_one = g_value_get_int (value);
        break;

    case PORP_TWO:
        priv->prop_two = g_value_get_int (value);
        break;

    default:
        /* We don\'t have any other property... */
        G_OBJECT_WARN_INVALID_PROPERTY_ID (object, property_id, pspec);
        break;
    }
}\n''', ));
