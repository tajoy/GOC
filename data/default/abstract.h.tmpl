<?py include('./header.h.tmpl') ?>

#ifndef _${big_snake_id}_H_
#define _${big_snake_id}_H_

/************ includes ************/
#include <glib-object.h>

/************ defines ************/
G_BEGIN_DECLS

#define TYPE_${big_snake_id}             (${snake_id}_get_type())
#define ${big_snake_id}(obj)             (G_TYPE_CHECK_INSTANCE_CAST((obj),TYPE_${big_snake_id}, ${camel_id}))
#define ${big_snake_id}_CLASS(klass)     (G_TYPE_CHECK_CLASS_CAST((klass), TYPE_${big_snake_id}, ${camel_id}Class))
#define IS_${big_snake_id}(obj)          (G_TYPE_CHECK_INSTANCE_TYPE((obj),TYPE_${big_snake_id}))
#define IS_${big_snake_id}_CLASS(klass)  (G_TYPE_CHECK_CLASS_TYPE((klass), TYPE_${big_snake_id}))
#define ${big_snake_id}_GET_CLASS(o)     (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_${big_snake_id}, ${camel_id}Class))

/************ types ************/
typedef struct _${camel_id}            ${camel_id};
typedef struct _${camel_id}Class       ${camel_id}Class;
typedef struct _${camel_id}Private     ${camel_id}Private;

struct _${camel_id}
{
    ${parent_name} parent;
};
struct _${camel_id}Class
{
    ${parent_class_name} parent_class;
};

/************ globals ************/


/************ function declarations ************/
GType ${snake_id}_get_type();

G_END_DECLS
#endif /* _${big_snake_id}_H_ */