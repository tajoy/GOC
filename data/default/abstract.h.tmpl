<?py # -*- coding: utf-8 -*- ?>
<?py include('./header.h.tmpl') ?>

#ifndef _#{big_snake_id}_H_
#define _#{big_snake_id}_H_

/************ includes ************/
#include <glib-object.h>

/************ defines ************/
G_BEGIN_DECLS

#define #{prefix.upper()}_TYPE_#{big_snake_name}            (#{snake_id}_get_type())
#define #{prefix.upper()}_#{big_snake_name}(obj)            (G_TYPE_CHECK_INSTANCE_CAST((obj), #{prefix.upper()}_TYPE_#{big_snake_name}, #{camel_id}))
#define #{prefix.upper()}_#{big_snake_name}_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST((klass),  #{prefix.upper()}_TYPE_#{big_snake_name}, #{camel_id}Class))
#define #{prefix.upper()}_IS_#{big_snake_name}(obj)         (G_TYPE_CHECK_INSTANCE_TYPE((obj), #{prefix.upper()}_TYPE_#{big_snake_name}))
#define #{prefix.upper()}_IS_#{big_snake_name}_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),  #{prefix.upper()}_TYPE_#{big_snake_name}))
#define #{prefix.upper()}_GET_#{big_snake_name}_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS ((obj), #{prefix.upper()}_TYPE_#{big_snake_name}, #{camel_id}Class))

/************ types ************/
typedef struct _#{camel_id}            #{camel_id};
typedef struct _#{camel_id}Class       #{camel_id}Class;
typedef struct _#{camel_id}Private     #{camel_id}Private;

struct _#{camel_id}
{
    #{parent_name} parent;
};
struct _#{camel_id}Class
{
    #{parent_class_name} parent_class;
};

/************ globals ************/


/************ function declarations ************/
GType #{snake_id}_get_type();

G_END_DECLS
#endif /* _#{big_snake_id}_H_ */